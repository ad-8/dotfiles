#+title: My Emacs Config

This ~config.org~ gets tangled automatically into a ~config.el~ by Doom.

* Table of Contents :toc:
- [[#resources][Resources]]
- [[#bookmarks][Bookmarks]]
  - [[#where-to-save][where to save]]
  - [[#when-to-save][when to save]]
- [[#doom][Doom]]
  - [[#lexical-binding][lexical-binding]]
  - [[#info-from-the-original-configel][Info from the original config.el]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#misc][Misc]]
- [[#emms][EMMS]]
- [[#functions][Functions]]
- [[#keybindings][Keybindings]]
  - [[#ax-1][ax-1]]
  - [[#ax-custom-prefix-space-j][ax-custom-prefix: SPACE j]]
  - [[#toggle][toggle]]
- [[#markdown][Markdown]]
  - [[#headers][Headers]]
  - [[#toggle-markdown-view][Toggle Markdown View]]
- [[#org-stuff][Org Stuff]]
- [[#clean-up----misc-stuff][clean up -- Misc Stuff]]

* Resources
- https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org
- https://joshblais.com/blog/living-in-emacs/
  
* Bookmarks
** where to save
The variable ‘bookmark-default-file’ specifies the file in which to
save bookmarks by default.
#+begin_src emacs-lisp
(setq bookmark-default-file
      (expand-file-name "emacs-bookmark-default-file"
                        (expand-file-name "~/sync")))
#+end_src

** when to save
If you set the variable ‘bookmark-save-flag’ to 1, each command that
sets a bookmark will also save your bookmarks; this way, you don't lose
any bookmark values even if Emacs crashes.  The value, if a number, says
how many bookmark modifications should go by between saving.  If you set
this variable to ‘nil’, Emacs only saves bookmarks if you explicitly use
‘M-x bookmark-save’.
#+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src

* Doom
** lexical-binding
Without this line, we get a "soft" error in ~config.el~.
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Info from the original config.el
#+begin_src emacs-lisp :tangle no

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
** Font
#+begin_src emacs-lisp :tangle no
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept.
#+end_src

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack Nerd Font" :size 14 :weight 'semi-light))
#+end_src

TODO: the font needs to be installed, else Emacs won't start.
Toggle with ~M-x variable-pitch-font~.
#+begin_src emacs-lisp :tangle no
(setq doom-variable-pitch-font (font-spec :family "Comic Neue" :size 13 :slant 'italic ))
#+end_src

#+begin_src emacs-lisp :tangle no
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src
** Theme 
#+begin_src emacs-lisp :tangle no
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord)
#+end_src
** Misc
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
#+end_src

* EMMS
Emacs Multimedia System
https://www.gnu.org/software/emms/
#+begin_src emacs-lisp

; TODO remove i guess its random
(setq emms-source-file-default-directory "~/0musiccopy/")
(setq emms-show-format " %artist - %title ")
(setq emms-show-album-art t)



;; https://lucidmanager.org/productivity/configure-emms/
;; TODO refactor into headin ghere
;; without this, no cover in browser (should be default !!)

;; Emacs Multimedia System
(use-package emms
  :config
  (require 'emms-setup)
  (require 'emms-mpris)
  (emms-all)
  (emms-default-players)
  (emms-mpris-enable)
  :custom
  (emms-browser-covers #'emms-browser-cache-thumbnail-async)
  :bind
  (("C-c w m b" . emms-browser)
   ("C-c w m e" . emms)
   ("C-c w m p" . emms-play-playlist )
   ("<XF86AudioPrev>" . emms-previous)
   ("<XF86AudioNext>" . emms-next)
   ("<XF86AudioPlay>" . emms-pause)))


(defun ax/trigger-scrobble (status)
  "Run when a song starts or finishes. STATUS should be either 'started or 'finished."
  (let* ((track (emms-playlist-current-selected-track))
         (title (emms-track-get track 'info-title))
         (artist (emms-track-get track 'info-artist))
         (album (emms-track-get track 'info-album))
         (message-text (format "%s — %s" (or artist "Unknown artist") (or title "Unknown title")))
         (status-text (if (eq status 'started) "Now playing" "Finished playing")))
    (message "%s: %s" status-text message-text)
    ;; (shell-command (format "notify-send '%s' '%s'" status-text message-text))
    
    ;; TODO move script
    (shell-command
     (format "nix develop ~/sync/tmp/0lastfm --command python ~/sync/tmp/0lastfm/scrobble.py %s %s %s"
         ;; shell-quote-argument helps when eg title is multiple words, so we only pass exactly 3 args to python
         (shell-quote-argument (or artist "Unknown artist"))
         (shell-quote-argument (or album "Unknown album"))
         (shell-quote-argument (or title "Unknown title"))))))

(add-hook 'emms-player-started-hook
          (lambda () (ax/trigger-scrobble 'started)))
#+end_src

* Functions
my custom functions, prefixed with =ax/= to find them effortlessly using =M-x=
#+begin_src emacs-lisp

(defun ax/open-trixie ()
  "Open trixie.org in dired"
  (interactive)
  (dired "~/sync/0-from-MEGAsync/debian-trixie.org"))

(defun ax/open-trixie-x ()
  "Open trixie.org in editor"
  (interactive)
  (find-file "~/sync/0-from-MEGAsync/debian-trixie.org"))


(defun ax/my-hello-message ()
  (interactive)
  (message "Hello World from Doom!"))


(defun ax/my-run-date ()
  (interactive)
  (message "Date is: %s" (string-trim (shell-command-to-string "date +%F_%T"))))


;; TODO doesn't work for nested list items, if those have a second line
(defun ax/org-fold-all-list-items ()
  "Fold all multi-line list items in the current Org buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward org-list-full-item-re nil t)
      (when (org-at-item-p)
        (org-cycle)))))

(defun ax/git-count-commits ()
  "Count the number of commits in the current Git repository
   using \='git log --oneline | wc -l\='."
  (interactive)
  (message "Number of commits: %s"
           (string-trim (shell-command-to-string "git log --oneline | wc -l"))))
#+end_src

* Keybindings
** ax-1
#+begin_src emacs-lisp
(map! :leader
      :desc "(Un)comment line" "-" #'comment-line)

(map! :leader
      :prefix "j"
      :desc "Toggle Dired Preview (global)"
      "p" #'dired-preview-global-mode)

(map! :leader
      :prefix "w"
      :desc "Horizontal split" "z" #'evil-window-split)
#+end_src
** ax-custom-prefix: SPACE j
why =j=? because its a convenient key to type and surprisingly the namespace was completely empty
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("j" . "ax custom binds")
       (:prefix ("f" . "fzf")
        :desc "Starts fzf session in dir" "f" #'fzf-directory)
       ;; this is nested under spc-j-p-p
       ;; (:prefix ("p" . "dired-preview")
       ;;  :desc "Toggle dired-preview" "p" #'dired-preview-mode)
       (:prefix ("t" . "testing stuff")
        :desc "hello world" "h" #'ax/my-hello-message
        :desc "print date" "d" #'ax/my-run-date
        :desc "org-babel-tangle" "t" #'org-babel-tangle)))
#+end_src
** toggle
originally taken from DT's config
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle eshell split"            "e" #'+eshell/toggle
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle markdown-view-mode"      "M" #'ax/toggle-markdown-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines
       :desc "Toggle treemacs"                "T" #'+treemacs/toggle))

;; (map! :leader
;;       (:prefix ("o" . "open here")
;;        :desc "Open eshell here"    "e" #'+eshell/here
;;        :desc "Open vterm here"     "v" #'+vterm/here))
#+end_src

* Markdown

try ~markdown-view-mode~ for a better reading experience!

** Headers
This sets the font size for each markdown header level.  Having variable font sizes in a markdown outline makes it visually appealing and more readable.
#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.2))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.1)))))
#+end_src

** Toggle Markdown View
A custom function to toggle between standard =markdown-mode= and =markdown-view-mode=.
#+begin_src emacs-lisp
(defun ax/toggle-markdown-mode ()
  "Toggle between `markdown-mode` and `markdown-view-mode`."
  (interactive)
  (if (eq major-mode 'markdown-view-mode)
      (markdown-mode)
    (markdown-view-mode)))
#+end_src
* Org Stuff
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; TODO
(setq org-directory "~/org/")

;; org-mode: set different heading sizes
(custom-theme-set-faces!
'doom-nord
'(org-level-8 :inherit outline-3 :height 1.0)
'(org-level-7 :inherit outline-3 :height 1.0)
'(org-level-6 :inherit outline-3 :height 1.1)
'(org-level-5 :inherit outline-3 :height 1.2)
'(org-level-4 :inherit outline-3 :height 1.3)
'(org-level-3 :inherit outline-3 :height 1.4)
'(org-level-2 :inherit outline-2 :height 1.5)
'(org-level-1 :inherit outline-1 :height 1.6)
'(org-document-title  :height 1.8 :bold t :underline nil))
#+end_src
* TODO clean up -- Misc Stuff

#+begin_src emacs-lisp
;; AX
; doom doctor suggestions
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell "/usr/bin/fish")
(setq-default explicit-shell-file-name "/usr/bin/fish")



;; activate rainbow mode for org documents and all programming modes
; (add-hook! org-mode 'rainbow-mode)
; (add-hook! prog-mode 'rainbow-mode)


(setenv "FZF_DEFAULT_COMMAND" "fd -u")
;(use-package! fzf)
(use-package! fzf
  :bind
    ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 35))

;; Prevent Doom from forcing vterm into a bottom popup window.
;; This lets vterm open in the current or split window like any normal buffer.
(after! vterm
  (set-popup-rule! "^\\*vterm\\*" :ignore t))

(after! org
  (require 'ox-twbs))

(setq image-dired-thumb-size 128)

(setq image-dired-external-viewer "nsxiv")

;; TOOD find a better solution
;; ever since rubocop installed via gem, ruby-lsp is gone =lsp-describe-session=
;; Disable rubocop-ls
;;(after! lsp-mode
;;  (setq lsp-disabled-clients '(rubocop-ls)))

;; https://protesilaos.com/emacs/dired-preview
(setq dired-preview-delay 0.1) ;; default 0.7
(setq dired-preview-max-size (expt 2 20))
(setq dired-preview-ignored-extensions-regexp
        (concat "\\."
                "\\(gz\\|"
                "zst\\|"
                "tar\\|"
                "xz\\|"
                "rar\\|"
                "zip\\|"
                "iso\\|"
                "epub"
                "\\)"))




; ------------
;; clojure those seem to work
(after! lsp-mode
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-position 'top))  ; Position pop-up at top of window
(after! cider
  (add-hook 'cider-mode-hook #'lsp)
  (setq cider-doc-view-function #'cider-docview-inline-symbol))  ; Inline docs with examples
; ------------


;(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+end_src
